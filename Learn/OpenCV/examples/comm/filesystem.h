#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <windows.h>
#include <io.h>

#include <stdlib.h>
#include <string>
//#include "root_directory.h" // This is a configuration file generated by CMake.

class FileSystem
{
private:
	// 定义一个函数指针类型
	typedef std::string (*Builder) (const std::string& path);
public:
	static std::string getPath(const std::string& path)
	{
		// 定义函数指针类型的变量
		//static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
		static Builder  pathBuilder = getPathBuilder();
		return (*pathBuilder)(path);
	}
private:
	 static std::string const & getRoot()
	 {
		 static char const * envRoot = getenv("LOGL_ROOT_PATH");
		 static char const * givenRoot = (envRoot != nullptr? envRoot : getRootPath());
		 static std::string root = (givenRoot != nullptr ? givenRoot : "");
		 return root;
	 }

	 static Builder getPathBuilder()
	 {
		 if (getRoot() != "")
			 return &FileSystem::getPathRelativeRoot;
		 else
			 return &FileSystem::getPathRelativeBinary;
	 }

	 static std::string findRootPath(const std::string& path,const std::string& rootName)
	 {
		 bool hasRail = false; // 文件夹是否还有分割斜杠
		 int pos = path.find_last_of("\\");
		 if (pos != std::string::npos)
		 {
			 if (pos == path.size() - 1)
			 {
				 hasRail = true;
			 }
			 else
			 {
				 hasRail = false;
			 }
		 }
		 int i = 0;
		 std::string basePath = hasRail ? path : path + "\\";
		 std::string relativePath = "..\\";
		 std::string findPath = basePath + rootName +"\\";
		 while (i < 4)
		 {
			 if (_access(findPath.c_str(), 0) == 0) return findPath;
			 else
			 {
				 findPath = basePath;
				 for (int j = 0; j <= i; ++j)
					 findPath += relativePath;
				 findPath += rootName;
				 findPath += "\\";
				 if (_access(findPath.c_str(), 0) == 0) return findPath;
			 }
			 i++;
		 }
		 return path;
	 }
	 
	 static std::string getPathRelativeRoot(const std::string& path)
	 {
		    return getRoot() + std::string("\\") + path;
	 }
	 static std::string getPathRelativeBinary(const std::string& path)
	 {
		  return "../../../" + path;
	 }

public:
	

	static const char* getRootPath()
	{
		static bool bInit = false;
		static char buffer[MAX_PATH] = { 0 };
	
		if (!bInit)
		{
			std::string path = "I:\\co\\ImageProcessing.git\\Learn\\OpenCV\\examples";
			GetModuleFileNameA(NULL, buffer, MAX_PATH);
			std::string appName = buffer;
			path = appName.substr(0, appName.find_last_of("\\"));
			
			path = findRootPath(path,"examples");
			
			memset(buffer, 0, MAX_PATH);
			memcpy_s(buffer, MAX_PATH, path.c_str(), path.size());
			bInit = true;
		}
		static const char * logl_root = buffer;
		return logl_root;
	}
};

// FILESYSTEM_H
#endif
